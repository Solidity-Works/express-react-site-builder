{"ast":null,"code":"export default function (editor) {\n  let opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const c = opt;\n  let bm = editor.BlockManager;\n  let blocks = c.blocks;\n  let stylePrefix = c.stylePrefix;\n  const flexGrid = c.flexGrid;\n  const basicStyle = c.addBasicStyle;\n  const clsRow = `${stylePrefix}row`;\n  const clsCell = `${stylePrefix}cell`;\n  const styleRow = flexGrid ? `\n    .${clsRow} {\n      display: flex;\n      justify-content: flex-start;\n      align-items: stretch;\n      flex-wrap: nowrap;\n      padding: 10px;\n    }\n    @media (max-width: 768px) {\n      .${clsRow} {\n        flex-wrap: wrap;\n      }\n    }` : `\n    .${clsRow} {\n      display: table;\n      padding: 10px;\n      width: 100%;\n    }\n    @media (max-width: 768px) {\n      .${stylePrefix}cell, .${stylePrefix}cell30, .${stylePrefix}cell70 {\n        width: 100%;\n        display: block;\n      }\n    }`;\n  const styleClm = flexGrid ? `\n    .${clsCell} {\n      min-height: 75px;\n      flex-grow: 1;\n      flex-basis: 100%;\n    }` : `\n    .${clsCell} {\n      width: 8%;\n      display: table-cell;\n      height: 75px;\n    }`;\n  const styleClm30 = `\n  .${stylePrefix}cell30 {\n    width: 30%;\n  }`;\n  const styleClm70 = `\n  .${stylePrefix}cell70 {\n    width: 70%;\n  }`;\n  const step = 0.2;\n  const minDim = 1;\n  const currentUnit = 1;\n  const resizerBtm = {\n    tl: 0,\n    tc: 0,\n    tr: 0,\n    cl: 0,\n    cr: 0,\n    bl: 0,\n    br: 0,\n    minDim\n  };\n  const resizerRight = {\n    ...resizerBtm,\n    cr: 1,\n    bc: 0,\n    currentUnit,\n    minDim,\n    step\n  };\n\n  // Flex elements do not react on width style change therefore I use\n  // 'flex-basis' as keyWidth for the resizer on columns\n  if (flexGrid) {\n    resizerRight.keyWidth = 'flex-basis';\n  }\n  const rowAttr = {\n    class: clsRow,\n    'data-gjs-droppable': `.${clsCell}`,\n    'data-gjs-resizable': resizerBtm,\n    'data-gjs-name': 'Row'\n  };\n  const colAttr = {\n    class: clsCell,\n    'data-gjs-draggable': `.${clsRow}`,\n    'data-gjs-resizable': resizerRight,\n    'data-gjs-name': 'Cell'\n  };\n  if (flexGrid) {\n    colAttr['data-gjs-unstylable'] = ['width'];\n    colAttr['data-gjs-stylable-require'] = ['flex-basis'];\n  }\n\n  // Make row and column classes private\n  const privateCls = [`.${clsRow}`, `.${clsCell}`];\n  editor.on('selector:add', selector => privateCls.indexOf(selector.getFullName()) >= 0 && selector.set('private', 1));\n  const attrsToString = attrs => {\n    const result = [];\n    for (let key in attrs) {\n      let value = attrs[key];\n      const toParse = value instanceof Array || value instanceof Object;\n      value = toParse ? JSON.stringify(value) : value;\n      result.push(`${key}=${toParse ? `'${value}'` : `\"${value}\"`}`);\n    }\n    return result.length ? ` ${result.join(' ')}` : '';\n  };\n  const toAdd = name => blocks.indexOf(name) >= 0;\n  const attrsRow = attrsToString(rowAttr);\n  const attrsCell = attrsToString(colAttr);\n  toAdd('column1') && bm.add('column1', {\n    label: c.labelColumn1,\n    category: c.category,\n    attributes: {\n      class: 'gjs-fonts gjs-f-b1'\n    },\n    content: `<div ${attrsRow}>\n        <div ${attrsCell}></div>\n      </div>\n      ${basicStyle ? `<style>\n          ${styleRow}\n          ${styleClm}\n        </style>` : ''}`\n  });\n  toAdd('column2') && bm.add('column2', {\n    label: c.labelColumn2,\n    attributes: {\n      class: 'gjs-fonts gjs-f-b2'\n    },\n    category: c.category,\n    content: `<div ${attrsRow}>\n        <div ${attrsCell}></div>\n        <div ${attrsCell}></div>\n      </div>\n      ${basicStyle ? `<style>\n          ${styleRow}\n          ${styleClm}\n        </style>` : ''}`\n  });\n  toAdd('column3') && bm.add('column3', {\n    label: c.labelColumn3,\n    category: c.category,\n    attributes: {\n      class: 'gjs-fonts gjs-f-b3'\n    },\n    content: `<div ${attrsRow}>\n        <div ${attrsCell}></div>\n        <div ${attrsCell}></div>\n        <div ${attrsCell}></div>\n      </div>\n      ${basicStyle ? `<style>\n          ${styleRow}\n          ${styleClm}\n        </style>` : ''}`\n  });\n  toAdd('column4') && bm.add('column4', {\n    label: c.labelColumn37,\n    category: c.category,\n    attributes: {\n      class: 'gjs-fonts gjs-f-b37'\n    },\n    content: `<div ${attrsRow}>\n        <div ${attrsCell} style=\"${flexGrid ? 'flex-basis' : 'width'}: 30%;\"></div>\n        <div ${attrsCell} style=\"${flexGrid ? 'flex-basis' : 'width'}: 70%;\"></div>\n      </div>\n      ${basicStyle ? `<style>\n          ${styleRow}\n          ${styleClm}\n          ${styleClm30}\n          ${styleClm70}\n        </style>` : ''}`\n  });\n}","map":{"version":3,"names":["editor","opt","arguments","length","undefined","c","bm","BlockManager","blocks","stylePrefix","flexGrid","basicStyle","addBasicStyle","clsRow","clsCell","styleRow","styleClm","styleClm30","styleClm70","step","minDim","currentUnit","resizerBtm","tl","tc","tr","cl","cr","bl","br","resizerRight","bc","keyWidth","rowAttr","class","colAttr","privateCls","on","selector","indexOf","getFullName","set","attrsToString","attrs","result","key","value","toParse","Array","Object","JSON","stringify","push","join","toAdd","name","attrsRow","attrsCell","add","label","labelColumn1","category","attributes","content","labelColumn2","labelColumn3","labelColumn37"],"sources":["D:/CMK/2023_5/WebsiteBuiderTask/modify/grapesJs/node_modules/grapesjs-blocks-basic/src/blocks.js"],"sourcesContent":["export default function (editor, opt = {}) {\n  const c = opt;\n  let bm = editor.BlockManager;\n  let blocks = c.blocks;\n  let stylePrefix = c.stylePrefix;\n  const flexGrid = c.flexGrid;\n  const basicStyle = c.addBasicStyle;\n  const clsRow = `${stylePrefix}row`;\n  const clsCell = `${stylePrefix}cell`;\n  const styleRow = flexGrid ? `\n    .${clsRow} {\n      display: flex;\n      justify-content: flex-start;\n      align-items: stretch;\n      flex-wrap: nowrap;\n      padding: 10px;\n    }\n    @media (max-width: 768px) {\n      .${clsRow} {\n        flex-wrap: wrap;\n      }\n    }` : `\n    .${clsRow} {\n      display: table;\n      padding: 10px;\n      width: 100%;\n    }\n    @media (max-width: 768px) {\n      .${stylePrefix}cell, .${stylePrefix}cell30, .${stylePrefix}cell70 {\n        width: 100%;\n        display: block;\n      }\n    }`;\n  const styleClm = flexGrid ? `\n    .${clsCell} {\n      min-height: 75px;\n      flex-grow: 1;\n      flex-basis: 100%;\n    }` : `\n    .${clsCell} {\n      width: 8%;\n      display: table-cell;\n      height: 75px;\n    }`;\n  const styleClm30 = `\n  .${stylePrefix}cell30 {\n    width: 30%;\n  }`;\n  const styleClm70 = `\n  .${stylePrefix}cell70 {\n    width: 70%;\n  }`;\n\n  const step = 0.2;\n  const minDim = 1;\n  const currentUnit = 1;\n  const resizerBtm = { tl: 0, tc: 0, tr: 0, cl: 0, cr:0, bl:0, br: 0, minDim };\n  const resizerRight = { ...resizerBtm, cr: 1, bc: 0, currentUnit, minDim, step };\n\n  // Flex elements do not react on width style change therefore I use\n  // 'flex-basis' as keyWidth for the resizer on columns\n  if (flexGrid) {\n    resizerRight.keyWidth = 'flex-basis';\n  }\n\n  const rowAttr = {\n    class: clsRow,\n    'data-gjs-droppable': `.${clsCell}`,\n    'data-gjs-resizable': resizerBtm,\n    'data-gjs-name': 'Row',\n  };\n\n  const colAttr = {\n    class: clsCell,\n    'data-gjs-draggable': `.${clsRow}`,\n    'data-gjs-resizable': resizerRight,\n    'data-gjs-name': 'Cell',\n  };\n\n  if (flexGrid) {\n    colAttr['data-gjs-unstylable'] = ['width'];\n    colAttr['data-gjs-stylable-require'] = ['flex-basis'];\n  }\n\n  // Make row and column classes private\n  const privateCls = [`.${clsRow}`, `.${clsCell}`];\n  editor.on('selector:add', selector =>\n    privateCls.indexOf(selector.getFullName()) >= 0 && selector.set('private', 1))\n\n  const attrsToString = attrs => {\n    const result = [];\n\n    for (let key in attrs) {\n      let value = attrs[key];\n      const toParse = value instanceof Array || value instanceof Object;\n      value = toParse ? JSON.stringify(value) : value;\n      result.push(`${key}=${toParse ? `'${value}'` : `\"${value}\"`}`);\n    }\n\n    return result.length ? ` ${result.join(' ')}` : '';\n  }\n\n  const toAdd = name => blocks.indexOf(name) >= 0;\n  const attrsRow = attrsToString(rowAttr);\n  const attrsCell = attrsToString(colAttr);\n\n  toAdd('column1') && bm.add('column1', {\n    label: c.labelColumn1,\n    category: c.category,\n    attributes: {class:'gjs-fonts gjs-f-b1'},\n    content: `<div ${attrsRow}>\n        <div ${attrsCell}></div>\n      </div>\n      ${ basicStyle ?\n        `<style>\n          ${styleRow}\n          ${styleClm}\n        </style>`\n        : ''}`\n  });\n\n  toAdd('column2') && bm.add('column2', {\n    label: c.labelColumn2,\n    attributes: {class:'gjs-fonts gjs-f-b2'},\n    category: c.category,\n    content: `<div ${attrsRow}>\n        <div ${attrsCell}></div>\n        <div ${attrsCell}></div>\n      </div>\n      ${ basicStyle ?\n        `<style>\n          ${styleRow}\n          ${styleClm}\n        </style>`\n        : ''}`\n  });\n\n  toAdd('column3') && bm.add('column3', {\n    label: c.labelColumn3,\n    category: c.category,\n    attributes: {class:'gjs-fonts gjs-f-b3'},\n    content: `<div ${attrsRow}>\n        <div ${attrsCell}></div>\n        <div ${attrsCell}></div>\n        <div ${attrsCell}></div>\n      </div>\n      ${ basicStyle ?\n        `<style>\n          ${styleRow}\n          ${styleClm}\n        </style>`\n        : ''}`\n  });\n\n  toAdd('column4') && bm.add('column4', {\n    label: c.labelColumn37,\n    category: c.category,\n    attributes: {class:'gjs-fonts gjs-f-b37'},\n    content: `<div ${attrsRow}>\n        <div ${attrsCell} style=\"${flexGrid ? 'flex-basis' : 'width'}: 30%;\"></div>\n        <div ${attrsCell} style=\"${flexGrid ? 'flex-basis' : 'width'}: 70%;\"></div>\n      </div>\n      ${ basicStyle ?\n        `<style>\n          ${styleRow}\n          ${styleClm}\n          ${styleClm30}\n          ${styleClm70}\n        </style>`\n        : ''}`\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}