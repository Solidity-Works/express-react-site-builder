{"ast":null,"code":"/**\r\n * Adds loadHtmltemplate command\r\n */\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { addWidget, updateWidget, getWidgets, getWidgetData } from \"./actions\";\nimport { loadHtmltemplate } from \"./consts\";\nimport JSZip from \"jszip\";\nimport fs from \"fs\";\nimport path from \"path\";\nexport default ((editor, config) => {\n  const cm = editor.Commands;\n  cm.add(loadHtmltemplate, e => {\n    const pHtml = e.getModel().get(\"Parser\").parserHtml;\n    // JSX expression in attributes are quoted, so unquote them before passing on\n    let html = pHtml.unquoteJsxExpresionsInAttributes(e.getHtml());\n    config.setHtmlString(html);\n    config.setCssString(e.getCss());\n  });\n  cm.add(\"save-db\", {\n    run: function (editor, sender) {\n      const loadAllFiles = () => {\n        return [\"./src/Chart/components.jsx\"];\n      };\n      const createZipFile = async () => {\n        // const zip = new JSZip();\n\n        // const fileURLs = loadAllFiles();\n\n        // fileURLs.forEach(fileURL => {\n        //   const reader = () => {\n        //     return new Promise((resolve, reject) => {\n        //         const file = new File(fileURL);\n        //         const fileReader = new FileReader();\n        //         fileReader.onload = () => resolve(fileReader.result);\n        //         fileReader.readAsDataURL(file)\n        //     });\n        //   }\n        //   const readFile = () => {\n        //       reader().then(result => console.log(result));\n        //       // zip.file(file.name, file);\n        //   }\n        //   readFile();\n        // });\n\n        // const blob = new Blob([zip.generateAsync({ type: \"blob\" }).then(content => content)], { type: \"application/zip\" });\n\n        // const link = document.createElement(\"a\");\n        // link.href = window.URL.createObjectURL(blob);\n        // link.download = \"my-file.zip\";\n        // link.click();\n      };\n      createZipFile();\n      sender && sender.set(\"active\");\n      editor.store();\n    }\n  });\n});","map":{"version":3,"names":["axios","React","useState","addWidget","updateWidget","getWidgets","getWidgetData","loadHtmltemplate","JSZip","fs","path","editor","config","cm","Commands","add","e","pHtml","getModel","get","parserHtml","html","unquoteJsxExpresionsInAttributes","getHtml","setHtmlString","setCssString","getCss","run","sender","loadAllFiles","createZipFile","set","store"],"sources":["D:/CMK/2023_5/WebsiteBuiderTask/modify/grapesJs/src/Chart/commands.js"],"sourcesContent":["/**\r\n * Adds loadHtmltemplate command\r\n */\r\nimport axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport { addWidget, updateWidget, getWidgets, getWidgetData } from \"./actions\";\r\nimport { loadHtmltemplate } from \"./consts\";\r\nimport JSZip from \"jszip\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nexport default (editor, config) => {\r\n  const cm = editor.Commands;\r\n\r\n  cm.add(loadHtmltemplate, (e) => {\r\n    const pHtml = e.getModel().get(\"Parser\").parserHtml;\r\n    // JSX expression in attributes are quoted, so unquote them before passing on\r\n    let html = pHtml.unquoteJsxExpresionsInAttributes(e.getHtml());\r\n    config.setHtmlString(html);\r\n    config.setCssString(e.getCss());\r\n  });\r\n  cm.add(\"save-db\", {\r\n    run: function (editor, sender) {\r\n\r\n      const loadAllFiles = () => {\r\n        return [\"./src/Chart/components.jsx\"];\r\n      };\r\n\r\n      const createZipFile = async () => {\r\n        // const zip = new JSZip();\r\n\r\n        // const fileURLs = loadAllFiles();\r\n    \r\n        // fileURLs.forEach(fileURL => {\r\n        //   const reader = () => {\r\n        //     return new Promise((resolve, reject) => {\r\n        //         const file = new File(fileURL);\r\n        //         const fileReader = new FileReader();\r\n        //         fileReader.onload = () => resolve(fileReader.result);\r\n        //         fileReader.readAsDataURL(file)\r\n        //     });\r\n        //   }\r\n        //   const readFile = () => {\r\n        //       reader().then(result => console.log(result));\r\n        //       // zip.file(file.name, file);\r\n        //   }\r\n        //   readFile();\r\n        // });\r\n    \r\n        // const blob = new Blob([zip.generateAsync({ type: \"blob\" }).then(content => content)], { type: \"application/zip\" });\r\n    \r\n        // const link = document.createElement(\"a\");\r\n        // link.href = window.URL.createObjectURL(blob);\r\n        // link.download = \"my-file.zip\";\r\n        // link.click();\r\n      };\r\n\r\n      createZipFile();\r\n      \r\n      sender && sender.set(\"active\");\r\n      editor.store();\r\n    },\r\n  });\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,YAAY,EAAEC,UAAU,EAAEC,aAAa,QAAQ,WAAW;AAC9E,SAASC,gBAAgB,QAAQ,UAAU;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,IAAI;AACnB,OAAOC,IAAI,MAAM,MAAM;AAEvB,gBAAe,CAACC,MAAM,EAAEC,MAAM,KAAK;EACjC,MAAMC,EAAE,GAAGF,MAAM,CAACG,QAAQ;EAE1BD,EAAE,CAACE,GAAG,CAACR,gBAAgB,EAAGS,CAAC,IAAK;IAC9B,MAAMC,KAAK,GAAGD,CAAC,CAACE,QAAQ,CAAC,CAAC,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,UAAU;IACnD;IACA,IAAIC,IAAI,GAAGJ,KAAK,CAACK,gCAAgC,CAACN,CAAC,CAACO,OAAO,CAAC,CAAC,CAAC;IAC9DX,MAAM,CAACY,aAAa,CAACH,IAAI,CAAC;IAC1BT,MAAM,CAACa,YAAY,CAACT,CAAC,CAACU,MAAM,CAAC,CAAC,CAAC;EACjC,CAAC,CAAC;EACFb,EAAE,CAACE,GAAG,CAAC,SAAS,EAAE;IAChBY,GAAG,EAAE,SAAAA,CAAUhB,MAAM,EAAEiB,MAAM,EAAE;MAE7B,MAAMC,YAAY,GAAGA,CAAA,KAAM;QACzB,OAAO,CAAC,4BAA4B,CAAC;MACvC,CAAC;MAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;QAChC;;QAEA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;QACA;QACA;MAAA,CACD;MAEDA,aAAa,CAAC,CAAC;MAEfF,MAAM,IAAIA,MAAM,CAACG,GAAG,CAAC,QAAQ,CAAC;MAC9BpB,MAAM,CAACqB,KAAK,CAAC,CAAC;IAChB;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module"}